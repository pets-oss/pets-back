extend type Query {
    """
    Lookup an animal.

    Examples:

    animal(id: 1)
    """
    animal("Animal id in database" id: Int!): Animal

    """
    Get all animals or animals filtered by animal ids, species, gender and breed ids.

    Examples:

    animals
    animals(ids: [1, 2, 3])
    animals(species: [1, 4], gender: [1, 2], breed: [205, 51])
    animals(first: 5)
    """
    animals(
        "Animal ids in database"
        ids: [Int]
        "Animal species ids in database"
        species: [Int]
        "Animal gender ids in database"
        gender: [Int]
        "Animal breed ids in database"
        breed: [Int],
        "Cursor to return animals after that cursor"
        after: String,
        "A non‐negative integer"
        first: Int,
        "Cursor to return animals before that cursor"
        before: String,
        "A non‐negative integer"
        last: Int
    ): AnimalsConnection
}

"A connection to animals."
type AnimalsConnection {
    "Information for pagination."
    pageInfo: PageInfo!
    "A list of animal edges."
    edges: [AnimalEdge!]!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
    "When paginating forwards, the cursor to continue."
    endCursor: String
}

"An edge in a connection."
type AnimalEdge {
    "The item at the end of the edge"
    node: Animal
    "A cursor for use in pagination"
    cursor: String!
}

"Represents an animal."
type Animal {
    "Animal id, for example 2"
    id: Int!
    "Animal name"
    name: String
    "Organization id"
    organization: Int!
    """
    Animal status by language.
    Examples: status(language: "en") or just status - will return default language ("lt") translation
    """
    status("Language code" language: String = "lt"): String
    "Image URL"
    imageUrl: String
    "Comments"
    comments: String
    "Modification time"
    modTime: String

    "Animal active registration info"
    registration: AnimalRegistration
    "Animal implanted microchip info"
    microchip: AnimalMicrochip
    "Animal details"
    details: AnimalDetails
}

extend type Mutation {
    "Created animal"
    createAnimal(input: CreateAnimalInput!): Animal
    "Updated animal"
    updateAnimal(input: UpdateAnimalInput!): Animal
    "Deleted animal"
    deleteAnimal(input: DeleteAnimalInput!): Animal
}

enum AnimalStatus {
    healthy
    vaccinated
    sick
    adopted
}

input CreateAnimalInput {
    "Animal name (128 characters max)"
    name: String
    "Organization id"
    organization: Int!
    "Status"
    status: AnimalStatus
    "Image File"
    image: Upload
    "Comments"
    comments: String
    "AnimalRegistration"
    registration: AnimalRegistrationInput!
    "AnimalDetails"
    details: AnimalDetailsInput
    "AnimalMicrochip"
    microchip: CreateAnimalMicrochipInput
}

input UpdateAnimalInput {
    "Animal id, for example 2"
    id: Int!
    "Animal name (128 characters max)"
    name: String
    "Organization id"
    organization: Int
    "Status"
    status: AnimalStatus
    "Image File"
    image: Upload
    "Comments"
    comments: String
    "AnimalRegistration"
    registration: AnimalRegistrationInput
    "AnimalDetails"
    details: AnimalDetailsInput
    "AnimalMicrochip"
    microchip: UpdateAnimalMicrochipInput
}

input DeleteAnimalInput {
    "Animal id, for example 2"
    id: Int!
}
