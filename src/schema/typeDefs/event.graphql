extend type Query {
    """
    Get all events

    Example:
    events
    events(animalId: 1)
    """
    events("Animal ID" animalId: Int, "Event groups" groups: [EventGroup]): [Event]
}

enum EventGroup {
    General,
    Medical,
    Registration
}

enum EventType {
    Giveaway,
    Streetfind,
    CheckIn,
    CheckOut,
    Died,
    TemporaryCare,
    Microchipping,
    LocationChange,
    Medication,
    Prophylaxis,
    Surgery,
    GenderElimination,
    Inspection
}

interface Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: EventDetails!
}

interface EventDetails {
    comments: String
}

type MicrochippingDetails implements EventDetails {
    microchip: AnimalMicrochip!
    comments: String
}

type Microchipping implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: MicrochippingDetails!
}

type MedicationDetails implements EventDetails {
    treatment: String!
    expenses: Float
    comments: String
}

type Medication implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: MedicationDetails!
}

type CheckInDetails implements EventDetails {
    registrationData: AnimalRegistration!
    comments: String
}

type CheckIn implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!,
    details: CheckInDetails!
}

type CheckOutDetails implements EventDetails {
    temporary: Boolean!
    newOwner: String! "Will be used similar object as FormerAnimalOwner"
    document: Document
    comments: String
}

type CheckOut implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: CheckOutDetails!
}

type StreetfindDetails implements EventDetails {
    registrationDate: String
    registrationNo: String
    street: String
    houseNo: String
    municipalityId: Int!
    comments: String
}

type Streetfind implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: StreetfindDetails!
}

type GiveawayDetails implements EventDetails {
    registrationDate: String
    registrationNo: String
    formerOwner: AnimalOwner!
    reason: String
    comments: String
}

type Giveaway implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: GiveawayDetails!
}

type LocationChangeDetails implements EventDetails {
    location: String!
    comments: String
}

type LocationChange implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    details: LocationChangeDetails!
}
