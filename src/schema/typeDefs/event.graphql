extend type Query {
    """
    Get all events

    Example:
    events
    events(animalId: 1)
    """
    events("Animal ID" animalId: Int, "Event groups" groups: [EventGroupEnum], types: [EventTypeEnum]): [Event]
}

enum EventGroupEnum {
    General,
    Medical,
    Registration,
}

type EventGroup {
    id: EventGroupEnum
    value: String
}

enum EventTypeEnum {
    Giveaway,
    Streetfind,
    Rescue,
    Birth,
    Adoption,
    TemporaryCare,
    Microchipping,
    Medication,
    Prophylaxis,
    Death,
    Surgery,
    Neutering,
    Inspection
}

type EventType {
    id: EventTypeEnum
    value: String
}

interface Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
}

enum MicrocipStatus {
    Implanted
    Removed
}

type MichrochipInfo {
    microchipId: Int!
    chipCompanyCode: Int!
    installPlaceId: Int!
    status: MicrocipStatus!
}

type Microchipping implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    microchip: MichrochipInfo!
}

type Adoption implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    newOwner: Person!
}

type TemporaryCare implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    temporaryOwner: Person!
    document: Document
}

type Streetfind implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    author: Author!
    createTime: String!
    modTime: String!
    comments: String
    registrationNo: String!
    witness: Person
    location: Location!
}

type Giveaway implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    registrationNo: String!
    formerOwner: Person!
    reason: String
}

type Rescue implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    registrationNo: String!
    witness: Person
    location: Location!
}

type Birth implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    registrationNo: String!
    motherId: Int
    fatherId: Int
}

type Medication implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    treatment: String!
    expenses: Float
}

type Surgery implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    surgery: String!
    result: String!
    expenses: Float
}

enum DeathType {
    Ilness
    Euthanasia
    Accident
    Senility
}

type Death implements Event {
    id: Int!
    animalId: Int!
    group: EventGroup!
    type: EventType!
    dateTime: String!
    createTime: String!
    author: Author!
    comments: String
    deathType: DeathType!
}
