/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import ChipInstallPlace from '../interfaces/chipInstallPlaceTranslation.interface';
import Ajv = require('ajv');

export const ajv = new Ajv({
    allErrors: true,
    coerceTypes: false,
    format: 'fast',
    nullable: true,
    unicode: true,
    uniqueItems: true,
    useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { ChipInstallPlace };
export const ChipInstallPlaceSchema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    defaultProperties: [],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
    },
    required: ['id', 'name'],
    type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
    Pick<Ajv.ValidateFunction, 'errors'>;
export const isChipInstallPlace = ajv.compile(
    ChipInstallPlaceSchema
) as ValidateFunction<ChipInstallPlace>;
export default function validate(value: unknown): ChipInstallPlace {
    if (isChipInstallPlace(value)) {
        return value;
    }
    throw new Error(
        `${ajv.errorsText(
            isChipInstallPlace.errors!.filter((e: any) => e.keyword !== 'if'),
            { dataVar: 'ChipInstallPlace' }
        )}\n\n${inspect(value)}`
    );
}
